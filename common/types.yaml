PlanetLocation:
  galaxy: int
  solar: int
  position: int

Buildings:
  metalMine: int
  crystalMine: int
  deuteriumSynthesizer: int
  solarPlant: int
  fusionReactor: int
  roboticsFactory: int
  naniteFactory: int
  shipyard: int
  metalStorage: int
  crystalStorage: int
  deuteriumTank: int
  researchLab: int
  alianceDepot: int
  missileSilo: int
  terraformer: int

UserCredentials:
  login: string
  passcode: string

PlayerId:
  id: int

Researchs:
  espionageTechnology: int
  computerTechnology: int
  weaponsTechnology: int
  shieldingTechnology: int
  armourTechnology: int
  energyTechnology: int
  hyperspaceTechnology: int
  combustionDrive: int
  impulseDrive: int
  hyperspaceDrive: int
  laserTechnology: int
  ionTechnology: int
  plasmaTechnology: int
  intergalacticResearchNetwork: int
  gravitonTechnology: int

LoginRequest:
  credentials: UserCredentials

RegisterRequest:
  credentials: UserCredentials

RegisterResponse:
  status: Status

BuildRequest:
  buildingName: Building

BuildResponse:
  status: Status

Storage:
  lastUpdatedAt: Timestamp
  metal: BigNum
  crystal: BigNum
  deuter: BigNum

Materials:
  metal: BigNum
  crystal: BigNum
  deuter: BigNum
  energy: BigNum

OnPlanetAction: union<BuildRequest>

StartBuildingActionRequest:
  building: Building
  planet: PlanetLocation

StartBuildingActionResponse:
  status: Status
  response: BuildingsViewResponse

Cost:
  metal: BigNum
  crystal: BigNum
  deuter: BigNum
  energy: BigNum

CostWithMultiplier:
  multiplier: BigNum
  baseCost: Cost

BuildingCost:
  cost: CostWithMultiplier
  name: Building

BuildingRequirement:
  name: Building
  level: int

ResearchRequirement:
  name: Research
  level: int

Requirements:
  buildings: BuildingRequirement[]
  researchs: ResearchRequirement[]

RequirementsForBuilding:
  name: Building
  requirements: Requirements

RequirementsForResearch:
  name: Research
  requirements: Requirements

AllRequirements:
  buildings: RequirementsForBuilding[]
  researchs: RequirementsForResearch[]

BaseProduction:
  production: int
  cost: int

BaseProductions:
  baseMetal: int
  baseCrystal: int
  metalMine: BaseProduction
  crystalMine: BaseProduction
  deuteriumSynthesizer: BaseProduction
  solarPlant: BaseProduction
  fusionReactor: BaseProduction

Knowledge:
  productions: BaseProductions
  buildingCosts: BuildingCost[]
  requirements: AllRequirements

Addresses:
  workStealing: string
  workDealing: string
  generalRequest: string
  resourceOwner: string
  rndMainAddress: optional<string>

Configuration:
  realTime: bool
  buildingSpeed: int
  addresses: Addresses

ProductionPercentages:
  metalMine: int
  crystalMine: int
  deuteriumSynthesizer: int
  solarPlant: int
  solarSatelite: int
  fusionReactor: int

CachedProduction:
  metalMineGeneration: int
  metalMineIdealGeneration: int
  metalMineEnergyUsage: int
  crystalMineGeneration: int
  crystalMineIdealGeneration: int
  crystalMineEnergyUsage: int
  deuteriumSynthesizerGeneration: int
  deuteriumSynthesizerIdealGeneration: int
  deuteriumSynthesizerEnergyUsage: int
  solarPlantGeneration: int
  solarSateliteGeneration: int
  fusionReactorGeneration: int
  fusionReactorIdealGeneration: int
  fusionReactorDeuterUsage: int

ProductionInformation:
  percentages: ProductionPercentages
  production: CachedProduction

ChangePercentageUsageActionRequest:
  planet: PlanetLocation
  chosenEntity: string
  newPercentage: number

LockPlayersNew: 
  players: PlayerId[]

LockReleaseNew: {}

LockPlanetCreation: {}

LockRequestData: union<LockPlayersNew,LockPlanetCreation,LockReleaseNew>

LockRequestNew:
  instanceId: int
  data: LockRequestData
  
LockResponseNew:
  success: bool
  timestamp: Timestamp

LockRequest:
  players: PlayerId[]
  oldLockId: optional<int>

LockResponse:
  timestamp: Timestamp
  lockId: int

LockRelease:
  lockId: int

OnPlanetState:
  storage: Storage
  buildings: Buildings
  buildingQueue: optional<BuildingQueueEntry>
  productionInformation: ProductionInformation
  planetList: PlanetLocation[]

OnPlanetQueriesResponse:
    storage: optional<StorageResponse>
    buildings: optional<BuildingsListResponse>
    buildingQueue: optional<BuildingQueueResponse>
    productionInformation: optional<ProductionInformation>
    planetList: PlanetLocation[]

OnPlanetResponseNew:
  response: OnPlanetState

OnPlanetRequestNew:
  planet: optional<PlanetLocation>
  action: optional<OnPlanetAction>
  requestType: int

AuthenticatedOnPlanetRequest:
  playerId: PlayerId
  request: OnPlanetRequestNew

WorkStealerReady: {}

WorkSharedPlanetRequest:
  data: union<WorkStealerReady,OnPlanetResponseNew>

WorkSharedPlanetResponse: AuthenticatedOnPlanetRequest

LoginResponseNew:
  success: bool

RegisterResponseNew:
  success: bool

InternalLoginResponse:
  playerId: optional<PlayerId>

ExternalGeneralRequest:
  data: union<LoginRequest,RegisterRequest>

ExternalGeneralResponse:
  data: union<LoginResponseNew,RegisterResponseNew>

InternalGeneralRequest:
  data: union<LoginRequest,RegisterRequest>

InternalGeneralResponse:
  data: union<InternalLoginResponse,RegisterResponseNew>