name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04
    

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2

      # install dependencies
    - name: apt-dependencies
      run: sudo apt-get update && sudo apt install firefox-geckodriver cmake git gcc g++ make nodejs npm node-typescript -y #&& sudo apt-get install -yq libboost-dev libboost-program-options-dev
    - name: virtualenv
      run: python -m pip install virtualenv && python -m pip install pyyaml
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build Standalone and Run Regression
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      #run: cmake --build . --config $BUILD_TYPE --target robot_tests
      run: make robot_tests || (echo "no elo:" && ls -la /home/runner/work/ogame/ogame/router/src/generated/CMakeFiles/GenHeaders.dir/" && cat /home/runner/work/ogame/ogame/router/src/generated/CMakeFiles/GenHeaders.dir/compiler_depend.ts && make robot_tests)

    - name: Prepare WASM compiler
      uses: mymindstorm/setup-emsdk@v7
      with:
        # Make sure to set a version number!
        #version: 1.38.40
        version: 2.0.11

    - name: Configure Build Environment for WASM
      run: mkdir ${{runner.workspace}}/build-wasm -p #&& emcmake cmake -E make_directory ${{runner.workspace}}/build-wasm

    - name: Configure CMake for WASM
      shell: bash
      working-directory: ${{runner.workspace}}/build-wasm
      run: emcmake cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build WASM and Run Regression
      working-directory: ${{runner.workspace}}/build-wasm
      shell: bash
      run: emmake make robot_tests -j

    - name: Prepare WASM deployment to publish
      shell: bash
      run: cd frontend && ./prepareGhDeployment.sh > package.json.temp && mv package.json.temp package.json && cd -

    - name: Build WASM deployment
      working-directory: ${{runner.workspace}}/build-wasm
      shell: bash
      run: emcmake cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DDEMO=1 && emmake make frontend -j

    - name: Publsih WASM deployment
      uses: JamesIves/github-pages-deploy-action@4.0.0
      with:
        branch: main
        folder: frontend/build
        repository-name: m-karcz/ogame-wasm-deployment
        single-commit: true
        token: ${{ secrets.DEPLOY_TOKEN }}

#    - name: Test
#      working-directory: ${{runner.workspace}}/build
#      shell: bash
#      # Execute tests defined by the CMake configuration.  
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest -C $BUILD_TYPE
